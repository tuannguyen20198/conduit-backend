generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  image      String?
  bio        String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  // Quan h·ªá v·ªõi Article
  articles Article[]

  // Quan h·ªá v·ªõi Follower
  followers Follower[] @relation("UserFollowers")
  following Follower[] @relation("UserFollowing")

  // Quan h·ªá v·ªõi Favorite
  favorites Favorite[]

  // Quan h·ªá v·ªõi Comment
  comments Comment[]
}

model Tag {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  // Quan h·ªá v·ªõi Article_Tag
  articleTags Article_Tag[]
}

model Article {
  id          Int           @id @default(autoincrement())
  slug        String        @unique
  title       String
  description String
  body        String // üî• Th√™m d√≤ng n√†y
  total_like  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    Int
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        Article_Tag[]
  favorites   Favorite[]
  comments    Comment[]
}

model Article_Tag {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@id([articleId, tagId]) // Composite Primary Key
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  article_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  // Kh√≥a ngo·∫°i
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  article Article @relation(fields: [article_id], references: [id], onDelete: Cascade)
}

model Follower {
  id           Int      @id @default(autoincrement())
  user_id      Int
  following_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  // Kh√≥a ngo·∫°i
  follower  User @relation("UserFollowers", fields: [user_id], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int     @id @default(autoincrement())
  body      String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
}
