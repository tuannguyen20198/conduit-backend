openapi: 3.0.0
paths:
  /api/health:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  /api/user:
    get:
      operationId: UserController_getMe
      parameters: []
      responses:
        "200":
          description: ""
      tags: &a1
        - User
    patch:
      operationId: UserController_updateMe
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: ""
      tags: *a1
  /api/users/login:
    post:
      operationId: UsersController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "201":
          description: ""
      tags: &a2
        - Users
  /api/users:
    post:
      operationId: UsersController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerUserDto"
      responses:
        "201":
          description: ""
      tags: *a2
  /api/profiles/{username}:
    get:
      operationId: ProfileController_getProfile
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: &a3
        - Profile
  /api/profiles/{username}/follow:
    post:
      operationId: ProfileController_followUser
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
      tags: *a3
    delete:
      operationId: ProfileController_unfollowUser
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a3
  /api/article:
    get:
      operationId: ArticleController_getArticles
      parameters:
        - name: current
          required: true
          in: query
          schema:
            type: number
        - name: pageSize
          required: true
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: &a4
        - Article
    post:
      operationId: ArticleController_create
      parameters: []
      responses:
        "201":
          description: ""
      tags: *a4
  /api/article/feed:
    get:
      operationId: ArticleController_findFeed
      parameters:
        - name: currentPage
          required: true
          in: query
          schema:
            type: string
        - name: pageSize
          required: true
          in: query
          schema:
            type: string
        - name: tags
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  /api/article/{slug}:
    get:
      operationId: ArticleController_findOne
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
    post:
      operationId: ArticleController_update
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArticleDto"
      responses:
        "201":
          description: ""
      tags: *a4
    delete:
      operationId: ArticleController_delete
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  /api/article/{slug}/comments:
    post:
      operationId: CommentsController_addComment
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentDto"
      responses:
        "201":
          description: ""
      tags: &a5
        - Comments
    get:
      operationId: CommentsController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a5
  /api/article/{slug}/comments/{id}:
    delete:
      operationId: CommentsController_deleteComment
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
  /api/article/{slug}/favorite:
    post:
      operationId: CommentsController_favoriteArticle
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
      tags: *a5
    delete:
      operationId: CommentsController_unfavoriteArticle
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
  /api/tags:
    get:
      operationId: TagsController_getTags
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - Tags
info:
  title: Conduit API
  description: API documentation for Conduit
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    UpdateUserDto:
      type: object
      properties:
        email:
          type: string
          example: jake@jake.jake
        bio:
          type: string
          example: I like to skateboard
        image:
          type: string
          example: https://i.stack.imgur.com/xHWG8.jpg
    LoginDto:
      type: object
      properties: {}
    registerUserDto:
      type: object
      properties: {}
    UpdateArticleDto:
      type: object
      properties: {}
    CreateCommentDto:
      type: object
      properties: {}
